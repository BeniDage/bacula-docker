services:
  minioserver:
    image: minio/minio
    container_name: minioserver
    ports:
      - 9000:9000  # MinIO API
      - 9001:9001  # MinIO Console
    environment:
      MINIO_ROOT_USER: adminuser
      MINIO_ROOT_PASSWORD: adminpassword
    command: server /data --console-address :9001
    volumes:
      - minio-data:/data
      - minio-config:/root/.minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - shared-network  # Attach to the shared network

  ready_minio:
    image: minio/mc
    container_name: ready_minio
    depends_on:
      minioserver:
        condition: service_healthy  # Wait for MinIO to be healthy
    #env_file:
     # - ./envs/local.env  # Load environment variables from a file
    entrypoint: ["/bin/sh", "-c", "/scripts/init-minio.sh"]
    volumes:
      - ./localbackup:/localbackup  # Mount the local backup directory
      - ./scripts/init-minio.sh:/scripts/init-minio.sh
    networks:
      - shared-network  # Attach to the shared network


  restic:
    image: restic/restic
    container_name: restic-backup
    depends_on:
      ready_minio:
        condition: service_started  # Ensure ready_minio starts first
    networks:
      - shared-network  # Attach to the bridge network
    environment:
      RESTIC_REPOSITORY: "/backup/restic-repo"
      RESTIC_PASSWORD_FILE: "/restic-password.txt/restic-password.txt"
      ##MINIO_ROOT_USER: adminuser
      #MINIO_ROOT_PASSWORD: adminpassword
    volumes:
      - ./backup:/backup
      - ./restic-password.txt:/restic-password.txt
      - ./restore:/restore
      - ./localbackup:/localbackup  # Mount the local backup directory
      - ./scripts/backup.sh:/scripts/backup.sh
    entrypoint: ["/bin/sh", "-c", "/scripts/backup.sh"]
        

volumes:
  minio-data:
  minio-config:
  localbackup:  # Define the shared volume
    driver: local

networks:
  shared-network:
    driver: bridge